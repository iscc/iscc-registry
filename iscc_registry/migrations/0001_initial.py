# Generated by Django 4.0.3 on 2022-04-04 09:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BlockModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "block_height",
                    models.PositiveBigIntegerField(
                        help_text="N-th block on source ledger", verbose_name="block height"
                    ),
                ),
                (
                    "block_hash",
                    models.CharField(
                        db_index=True,
                        help_text="Hash of block that includes the ISCC-DECLARATION",
                        max_length=128,
                        unique=True,
                        verbose_name="block hash",
                    ),
                ),
            ],
            options={
                "verbose_name": "Block",
                "verbose_name_plural": "Blocks",
            },
        ),
        migrations.CreateModel(
            name="ChainModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("url_template", models.CharField(blank=True, max_length=256)),
            ],
            options={
                "verbose_name": "Chain",
                "verbose_name_plural": "Chains",
            },
        ),
        migrations.CreateModel(
            name="IsccCodeModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="An ISCC-CODE",
                        max_length=96,
                        unique=True,
                        verbose_name="ISCC-CODE",
                    ),
                ),
            ],
            options={
                "verbose_name": "ISCC-CODE",
                "verbose_name_plural": "ISCC-CODEs",
            },
        ),
        migrations.CreateModel(
            name="IsccIdModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "iscc_id",
                    models.CharField(
                        db_index=True,
                        help_text="ISCC-ID - digital asset identifier",
                        max_length=32,
                        unique=True,
                        verbose_name="ISCC-ID",
                    ),
                ),
                (
                    "meta_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="URL with ISCC Metadata",
                        null=True,
                        verbose_name="metadata url",
                    ),
                ),
                (
                    "frozen",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the ISCC-ID is updatable",
                        verbose_name="frozen",
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the ISCC-ID has a `delete`-declaration",
                        verbose_name="deleted",
                    ),
                ),
                (
                    "revision",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times updated", verbose_name="revision"
                    ),
                ),
                (
                    "declarer",
                    models.ForeignKey(
                        help_text="PUBLIC-KEY or WALLET-ADDRESS of original DECLARING PARTY",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="declarations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="declarer",
                    ),
                ),
                (
                    "iscc_code",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="iscc_ids",
                        to="iscc_registry.iscccodemodel",
                        verbose_name="ISCC-CODE",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="PUBLIC-KEY or WALLET-ADDRESS of current OWNER (after transfer)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ownerships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner",
                    ),
                ),
                (
                    "registrar",
                    models.ForeignKey(
                        help_text="PUBLIC-KEY or WALLET-ADDRESS of REGISTRAR",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="registrations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="registrar",
                    ),
                ),
            ],
            options={
                "verbose_name": "ISCC-ID",
                "verbose_name_plural": "ISCC-IDs",
            },
        ),
        migrations.CreateModel(
            name="DeclarationModel",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        editable=False,
                        help_text="Declaration-ID with block timestamp based flake (total ordering)",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Hash of transaction that includes the ISCC-DECLARATION",
                        max_length=128,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "tx_out_idx",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Output index that includes ISCC-DECLARATION (UTXO based chains)",
                        verbose_name="transaction output",
                    ),
                ),
                (
                    "declaration",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="Original declaration data",
                        null=True,
                        verbose_name="declaration data",
                    ),
                ),
                (
                    "block",
                    models.ForeignKey(
                        help_text="The block that includes the ISCC-DECLARATION",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declarations_in_block",
                        to="iscc_registry.blockmodel",
                        verbose_name="block",
                    ),
                ),
                (
                    "iscc_id",
                    models.ForeignKey(
                        help_text="ISCC-ID minted by this declaration",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="iscc_id_declarations",
                        to="iscc_registry.isccidmodel",
                        verbose_name="iscc-id",
                    ),
                ),
            ],
            options={
                "verbose_name": "Declaration",
                "verbose_name_plural": "Declarations",
                "ordering": ["id"],
                "get_latest_by": ["id"],
            },
        ),
        migrations.AddField(
            model_name="blockmodel",
            name="chain",
            field=models.ForeignKey(
                help_text="Source Ledger/Blockchain",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blocks",
                to="iscc_registry.chainmodel",
                verbose_name="Chain",
            ),
        ),
        migrations.AddConstraint(
            model_name="declarationmodel",
            constraint=models.UniqueConstraint(fields=("tx_hash", "tx_out_idx"), name="unique_tx"),
        ),
    ]
